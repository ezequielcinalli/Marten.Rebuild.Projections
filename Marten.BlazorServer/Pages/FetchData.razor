@page "/fetchdata"
@using Marten.BlazorServer.Data
@inject WeatherForecastService ForecastService

<PageTitle>Weather forecast</PageTitle>

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from a service.</p>

<button @onclick="AddForecast">Add forecast</button>

@if (_forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in _forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private IReadOnlyList<WeatherForecast>? _forecasts;
    private readonly Random _random = new Random();

    protected override async Task OnInitializedAsync()
    {
        _forecasts = await ForecastService.GetForecastAsync();
    }

    private async Task AddForecast()
    {
        var temperatureC = _random.Next(50);
        await ForecastService.AddForecastAsync(temperatureC, RandomString(7));
        _forecasts = await ForecastService.GetForecastAsync();
    }

    private string RandomString(int length)
    {
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        return new string(Enumerable.Repeat(chars, length)
            .Select(s => s[_random.Next(s.Length)]).ToArray());
    }
}
